Notes while working with Box2D:
* Box2D gravity is not designed for top down views but we can disable it and use damping to serve the same purpose.
* Linear damping serves as our gravity but to get it to reasonable levels we have to increase it past the recommended 0.0 -> 0.1 range.
* Angular damping decreases spin which does not seem to matter for our simulation but some level of damping is needed to bring the ball to a stop.
* Restitution is the bounce factor. Documentation does not mentions specifically how this calculation works but since the value is between 0 and 1 we can presume it is just a straight percentage of momentum that is converted into the opposite direction after a collision. 0.5 felt like a realistic value for pool balls but this could easily be changed.
* Bodies are automatically added to the bodies array when created. I’m not sure what mechanism causes this but it sure is useful.
* Position of a body is its centre. When spawning a body at the very boundaries it will sometimes spawn on the outside of the table so a small offset of 0.5 was added. So far there’s been no other instances of balls spawning outside of the table and the offset is small enough that they will still sometimes spawn touching the walls of the table so we can model that behaviour.
* Balls that spawn too close to each other correct themselves after one frame. Balls that spawn in the exact same position only correct themselves once they are activated. However the chance of random generating the same float for both the x and y values for 2 balls is extremely unlikely it is in practice a non issue.
* Could not find documentation on a built in frame counter so made one of my own. It gets really finicky about scopes so right now it’s set to global. Will continue looking for a better solution.
* Bodies that aren’t moving or aren’t in close proximity to moving bodies are put to sleep to save processing time. We will use this as the test for whether the simulation has run its course. Static bodies like the table walls are considered always awake so we exclude them by position since none of the balls are capable of having position (0, 0).
* Right now some values that we want to vary are hardcoded in. There is no documentation on setting up arguments with pyBox2d and it is difficult to make a workaround since we are using the bundled debug graphics framework. Will continue to research this but the less elegant solution of multiple programs with different hard coded values should work without issue in the event a better solution can’t be found.